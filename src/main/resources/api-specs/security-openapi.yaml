openapi: "3.0.3"
info:
  title: "Iced Latte Security API"
  description: "API for accessing security and related operations in the Iced-Latte platform"
  version: "1.0.0"
  contact:
    name: "Iced Latte Support"
    email: "zufar.sunagatov@gmail.com"

servers:
  - url: "http://localhost:8083"
    description: "Local development server"
  - url: "https://iced-latte.uk/backend"
    description: "Production server"

tags:
  - name: "Security"
    description: "API for user registration, authentication, and password management"

paths:
  /api/v1/auth/register:
    post:
      tags:
        - "Security"
      summary: "Register a new user"
      operationId: "register"
      requestBody:
        description: "User registration data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationRequest"
      responses:
        "200":
          description: "Registration successful, email verification token sent"
          content:
            application/json:
              schema:
                type: string
                example: "Email verification token sent to the user with email = user@example.com"

  /api/v1/auth/confirm:
    post:
      tags:
        - "Security"
      summary: "Confirm user's email"
      operationId: "confirmEmail"
      requestBody:
        description: "Email confirmation data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmEmailRequest"
      responses:
        "200":
          description: "Email verification completed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistrationResponse"

  /api/v1/auth/authenticate:
    post:
      tags:
        - "Security"
      summary: "Authenticate a user"
      operationId: "authenticate"
      requestBody:
        description: "User credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthenticationRequest"
      responses:
        "200":
          description: "Authentication successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthenticationResponse"

  /api/v1/auth/logout:
    post:
      tags:
        - "Security"
      summary: "Logout a user"
      operationId: "logout"
      responses:
        "200":
          description: "Logout successful"
        "500":
          description: "Internal Server Error"

  /api/v1/auth/refresh:
    post:
      tags:
        - "Security"
      summary: "Refresh user authentication token"
      operationId: "refreshToken"
      responses:
        "200":
          description: "Token refreshed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthenticationResponse"
        "401":
          description: "Unauthorized access. Authentication required"
        "500":
          description: "Internal Server Error"

  /api/v1/auth/password/forgot:
    post:
      tags:
        - "Security"
      summary: "Request password reset"
      operationId: "forgotPassword"
      requestBody:
        description: "Email address of the user requesting a password reset"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "200":
          description: "Password reset request accepted"
        "401":
          description: "Unauthorized access"
        "500":
          description: "Internal Server Error"

  /api/v1/auth/password/change:
    post:
      tags:
        - "Security"
      summary: "Change user password"
      operationId: "changePassword"
      requestBody:
        description: "Password change request data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: "Password changed successfully"
        "401":
          description: "Unauthorized access"
        "500":
          description: "Internal Server Error"

components:
  schemas:
    UserRegistrationRequest:
      type: "object"
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: "string"
          description: "User's first name. Must be between 2 and 128 characters."
          minLength: 2
          maxLength: 128
          pattern: "^(?!\\s)(?!.*\\s$)(?!.*?--)[A-Za-z\\s-]*$"
        lastName:
          type: "string"
          description: "User's last name. Must be between 2 and 128 characters."
          minLength: 2
          maxLength: 128
          pattern: "^(?!\\s)(?!.*\\s$)(?!.*?--)[A-Za-z\\s-]*$"
        birthDate:
          type: "string"
          format: "date"
          description: "User's birth date in YYYY-MM-DD format."
        phoneNumber:
          type: "string"
          description: "User's phone number."
        email:
          type: "string"
          format: "email"
          maxLength: 128
          description: "User's email address must be a valid email format"
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        password:
          type: "string"
          description: "Password must be between 8 and 128 characters, with at least one letter, one digit, and may include special characters @$!%*?&."
          minLength: 8
          maxLength: 128
          pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$"
        addressDto:
          $ref: "./user-openapi.yaml#/components/schemas/AddressDto"

    UserRegistrationResponse:
      type: "object"
      properties:
        token:
          type: "string"
          description: "JWT token for authenticated user."
        refreshToken:
          type: "string"
          description: "Refresh token for generating a new JWT."

    UserAuthenticationRequest:
      type: "object"
      required:
        - email
        - password
      properties:
        email:
          type: "string"
          format: "email"
          description: "User's email address."
        password:
          type: "string"
          description: "User's password."

    UserAuthenticationResponse:
      type: "object"
      properties:
        token:
          type: "string"
          description: "JWT token for authenticated user."
        refreshToken:
          type: "string"
          description: "Refresh token."

    ConfirmEmailRequest:
      type: "object"
      required:
        - token
      properties:
        token:
          type: "string"
          description: "Token for confirming the email address."

    ForgotPasswordRequest:
      type: "object"
      required:
        - email
      properties:
        email:
          type: "string"
          format: "email"
          description: "Email address of the user requesting a password reset."

    ChangePasswordRequest:
      type: "object"
      required:
        - code
        - email
        - password
      properties:
        code:
          type: "string"
          description: "Verification code sent to the user's email."
        email:
          type: "string"
          format: "email"
          description: "User's email address."
        password:
          type: "string"
          description: "New password for the user. Must be at least 8 characters long, contain at least one letter, one digit, and may include special characters @$!%*?&."