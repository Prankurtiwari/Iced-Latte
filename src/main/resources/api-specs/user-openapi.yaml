openapi: "3.0.3"

info:
  title: "Iced Latte User API"
  description: "API for accessing user profiles and related operations in the Iced-Latte platform."
  version: "1.0.0"
  contact:
    name: "Iced Latte Support"
    email: "zufar.sunagatov@gmail.com"

servers:
  - url: "http://localhost:8083"
    description: "Local development server"
  - url: "https://iced-latte.uk/backend"
    description: "Production server"

tags:
  - name: "User"
    description: "Operations related to user profiles."

paths:
  /api/v1/users:

    get:
      tags:
        - "User"
      summary: "Get user profile"
      description: "Fetch detailed information about the authenticated user."
      operationId: "getUserProfile"
      responses:
        "200":
          description: "A user object containing detailed user information."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: "Unauthorized access. Authentication required."
        "404":
          description: "User not found."
        "500":
          description: "Internal Server Error."

    put:
      tags:
        - "User"
      summary: "Edit user profile"
      description: "Update the authenticated user's profile details."
      operationId: "editUserProfile"
      requestBody:
        description: "Payload containing the user's updated details."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserAccountRequest"
      responses:
        "200":
          description: "The updated user object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: "Invalid input data."
        "401":
          description: "Unauthorized access. Authentication required."
        "404":
          description: "User not found."
        "500":
          description: "Internal Server Error."

    patch:
      tags:
        - "User"
      summary: "Change user password"
      description: "Change the password for the authenticated user."
      operationId: "changeUserPassword"
      requestBody:
        description: "Payload containing the old and new passwords."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeUserPasswordRequest"
      responses:
        "200":
          description: "Password changed successfully."
        "400":
          description: "Validation error."
          content:
            application/json:
              examples:
                invalidPassword:
                  value: { "message": "Password must be at least 8 characters long and contain at least one letter, one digit, and may include special characters @$!%*?&." }
        "401":
          description: "Unauthorized access. Authentication required."
        "404":
          description: "User not found."
        "500":
          description: "Internal Server Error."

    delete:
      tags:
        - "User"
      summary: "Delete user profile"
      description: "Delete the authenticated user's profile."
      operationId: "deleteUserProfile"
      responses:
        "200":
          description: "User successfully deleted."
        "401":
          description: "Unauthorized access. Authentication required."
        "404":
          description: "User not found."
        "500":
          description: "Internal Server Error."

  /api/v1/users/password/reset:
    post:
      tags:
        - "User"
      summary: "Reset user password"
      description: "Initiate a user password reset."
      operationId: "resetUserPassword"
      responses:
        "200":
          description: "Password reset request confirmed successfully."
        "401":
          description: "Unauthorized access. Authentication required."
        "500":
          description: "Internal Server Error."

  /api/v1/users/password/reset/confirm:
    post:
      tags:
        - "User"
      summary: "Confirm password reset"
      description: "Confirm a user's password reset."
      operationId: "confirmResetUserPassword"
      requestBody:
        description: "Payload containing the reset token and new password."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmEmailRequest"
      responses:
        "200":
          description: "Password reset confirmed successfully."
        "401":
          description: "Unauthorized access. Authentication required."
        "500":
          description: "Internal Server Error."

  /api/v1/users/avatar:
    post:
      tags:
        - "User"
      summary: "Upload user avatar"
      description: "Upload a user's avatar image."
      operationId: "uploadUserAvatar"
      requestBody:
        description: "Payload containing the avatar image file."
        required: true
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
      responses:
        "200":
          description: "User avatar uploaded successfully."
        "401":
          description: "Unauthorized access. Authentication required."
        "500":
          description: "Internal Server Error."

    get:
      tags:
        - "User"
      summary: "Get user avatar link"
      description: "Retrieve the link to the authenticated user's avatar image."
      operationId: "getUserAvatarLink"
      responses:
        "200":
          description: "User avatar link retrieved successfully."
          content:
            application/json:
              schema:
                type: "string"
        "401":
          description: "Unauthorized access. Authentication required."
        "500":
          description: "Internal Server Error."

    delete:
      tags:
        - "User"
      summary: "Delete user avatar"
      description: "Delete the authenticated user's avatar image."
      operationId: "deleteUserAvatar"
      responses:
        "200":
          description: "User avatar deleted successfully."
        "401":
          description: "Unauthorized access. Authentication required."
        "500":
          description: "Internal Server Error."

components:
  schemas:
    UpdateUserAccountRequest:
      type: "object"
      description: "Payload containing the user's updated details."
      properties:
        firstName:
          type: "string"
          description: "The first name of the user."
          x-field-extra-annotation: "@jakarta.validation.constraints.NotNull(message = \"First name is the mandatory attribute\")"
          example: "John"
        lastName:
          type: "string"
          description: "The last name of the user."
          x-field-extra-annotation: "@jakarta.validation.constraints.NotNull(message = \"Last name is the mandatory attribute\")"
          example: "Doe"
        birthDate:
          type: "string"
          description: "The birth date of the user."
          format: date
        phoneNumber:
          type: "string"
          description: "The phone number of the user."
          example: "+1234567890"
        address:
          $ref: "#/components/schemas/AddressDto"

    ChangeUserPasswordRequest:
      type: "object"
      description: "Payload for changing user password."
      required:
        - newPassword
        - oldPassword
      properties:
        newPassword:
          type: "string"
          description: "Password must be between 8 and 128 characters, with at least one letter, one digit, and may include special characters @$!%*?&."
          minLength: 8
          maxLength: 128
          pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$"
          example: "NewPassword123!"
        oldPassword:
          type: "string"
          description: "Password must be between 8 and 128 characters, with at least one letter, one digit, and may include special characters @$!%*?&."
          minLength: 8
          maxLength: 128
          pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$"
          example: "OldPassword123!"

    UserDto:
      type: "object"
      description: "A user profile in the Iced-Latte system."
      required:
        - firstName
        - lastName
        - email
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "The unique identifier for the user."
        firstName:
          type: "string"
          minLength: 2
          maxLength: 128
          description: "The first name of the user."
        lastName:
          type: "string"
          minLength: 2
          maxLength: 128
          description: "The last name of the user."
        birthDate:
          type: "string"
          description: "The birth date of the user."
          format: date
        phoneNumber:
          type: "string"
          description: "The phone number of the user."
        stripeCustomerToken:
          type: "string"
          description: "The Stripe customer token associated with the user."
        email:
          type: "string"
          description: "The email address of the user."
          format: "email"
        address:
          $ref: "#/components/schemas/AddressDto"
        avatarLink:
          type: "string"
          description: "The avatar URL of the user."

    AddressDto:
      type: "object"
      description: "Address details of the user."
      required:
        - country
        - city
        - line
        - postcode
      properties:
        country:
          type: "string"
          minLength: 2
          maxLength: 128
          description: "The country of the address."
          example: "United Kingdom"
        city:
          type: "string"
          minLength: 2
          maxLength: 128
          description: "The city of the address."
          example: "London"
        line:
          type: "string"
          minLength: 2
          maxLength: 128
          description: "The address line."
          example: "123 Coffee St."
        postcode:
          type: "string"
          minLength: 2
          maxLength: 128
          description: "The postal code of the address."
          example: "E1 6AN"

    ConfirmEmailRequest:
      type: "object"
      description: "Payload to confirm a password reset."
      properties:
        token:
          type: "string"
          description: "The password reset token."
